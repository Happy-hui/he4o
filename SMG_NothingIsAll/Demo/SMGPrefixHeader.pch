//
//  SMGPrefixHeader.pch
//  SMG_NothingIsAll
//
//  Created by 贾  on 2017/5/3.
//  Copyright © 2017年 XiaoGang. All rights reserved.
//

#import <Availability.h>


#ifdef __OBJC__
#import <UIKit/UIKit.h>
#import <Foundation/Foundation.h>
#import "AppDelegate.h"
#import <CoreText/CoreText.h>
#import "AppEnum.h"
#import "Foundation+Log.m"

#import "SMGEnum.h"
#import "SMGUtils.h"
#import "SMGRange.h"
#import "SMGEnum.h"
#import "AIHeader.h"
#import "LKDBHelper.h"
#import "AILine.h"
#endif


#define theApp ((AppDelegate*)[[UIApplication sharedApplication] delegate])


/**
 *  MARK:--------------------ObserverKEY--------------------
 */
#define ObsKey_ThinkBusy @"ObsKey_ThinkBusy"                            //思考状改变
#define ObsKey_MainThreadBusy @"ObsKey_MainThreadBusy"                  //意识线程状态改变
#define ObsKey_AwarenessModelChanged @"ObsKey_AwarenessModelChanged"    //意识流新数据


/**
 *  MARK:--------------------PathKey--------------------
 */
#define PATH_NET_NODE               @"NET_NODE"     //神经网络根目录;(白质)
#define PATH_NET_CMV_NODE           @"NET_CMV_NODE"  //cmv节点根目录;(白质)
#define PATH_NET_FRONT_ORDER_NODE   @"NET_FRONT_ORDER_NODE"   //frontOrder节点根目录;(白质)

#define FOLDER_NET_INDEX            @"NET_INDEX"    //神经网络"索引"根文件夹名;(海马体)
#define PATH_NET_VALUE              @"NET_VALUE"    //神经网络"值数据"根目录;(海马体)
#define PATH_NET_REFERENCE          @"NET_REFERENCE"//神经网络"引用序列"根目录;(海马体)
#define PATH_NET_CMVMODEL           @"NET_CMVMODEL"  //神经网络"cmv模型"根目录;(杏仁核)

//#define PATH_NET_DATA             @"NET_DATA"     //神经网络"数据"根目录;(海马体)


/**
 *  MARK:--------------------fileNameKey--------------------
 */
#define FILENAME_Node @"node"
#define FILENAME_CMVModel @"cmvModel"
#define FILENAME_Value @"value"
#define FILENAME_Index @"index"
#define FILENAME_Reference @"reference"


/**
 *  MARK:--------------------数据检查--------------------
 */

//String
#define STRISOK(a) (a  && ![a isKindOfClass:[NSNull class]] && [a isKindOfClass:[NSString class]] && ![a isEqualToString:@""])//是否空字符串
#define STRTOOK(a) (a  && ![a isKindOfClass:[NSNull class]]) ? ([a isKindOfClass:[NSString class]] ? a : [NSString stringWithFormat:@"%@", a]) : @""
#define STRFORMAT(a, ...) [NSString stringWithFormat:a, ##__VA_ARGS__]//String.format

//Array
#define ARRISOK(a) (a  && [a isKindOfClass:[NSArray class]] && a.count)//是否空数组
#define ARRTOOK(a) (a  && [a isKindOfClass:[NSArray class]]) ?  a : [NSArray new]
#define ARR_INDEX(a,i) (a && [a isKindOfClass:[NSArray class]] && a.count > i) ?  a[i] : nil//数组取子防闪

//NSNumber
#define NUMISOK(a) (a  && [a isKindOfClass:[NSNumber class]])//是否有效NSNumber
#define NUMTOOK(a) (a  && [a isKindOfClass:[NSNumber class]]) ? a : @(0)

//Dic
#define DICISOK(a) (a  && [a isKindOfClass:[NSDictionary class]] && a.count)//是否空字典
#define DICTOOK(a) (a  && [a isKindOfClass:[NSDictionary class]]) ?  a : [NSDictionary new]

//AILine
#define LINEISOK(a) (a  && [a isKindOfClass:[AILine class]])

//AIPointer
#define POINTERISOK(a) (a && [a isKindOfClass:[AIPointer class]] && a.pointerId > 0)

//ISOK
#define ISOK(obj, class) (obj && [obj isKindOfClass:class])

/**
 *  MARK:--------------------快捷建对象--------------------
 */

//SMGRange
#define SMGRangeMake(loc,len) [SMGRange rangeWithLocation:loc length:len]

//NSArray
#define SMGArrayMake(arg) \
NSMutableArray *array = [NSMutableArray arrayWithObject:arg];\
va_list args;\
va_start(args, arg);\
id next = nil;\
while ((next = va_arg(args,id))) {\
[array addObject:next];\
}\
va_end(args);\


/**
 *  MARK:--------------------快捷访问对象--------------------
 */
//2017.11.13后启用N8规则DOP架构;
#define theNet [AINet sharedInstance]
#define theInput [AIInput sharedInstance]
